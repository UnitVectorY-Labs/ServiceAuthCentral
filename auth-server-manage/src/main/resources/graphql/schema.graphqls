type Query {
  clients(
    first: Int
    after: String
    last: Int
    before: String
  ): ClientSummaryConnection
  client(clientId: ID!): Client
  authorization(id: ID!): Authorization
}

type Mutation {
  addClient(
    clientId: String!
    description: String!
    availableScopes: [ClientScopeInput]
  ): Client!
  deleteClient(clientId: String!): Response!
  generateClientSecret1(clientId: String!): ClientSecret!
  generateClientSecret2(clientId: String!): ClientSecret!
  clearClientSecret1(clientId: String!): ClientSecret!
  clearClientSecret2(clientId: String!): ClientSecret!
  authorizeJwtBearer(
    clientId: String!
    jwksUrl: String!
    iss: String!
    sub: String!
    aud: String!
  ): Response!
  deauthorizeJwtBearer(clientId: String!, id: String!): Response!
  authorize(subject: String!, audience: String!): Response!
  deauthorize(subject: String!, audience: String!): Response!
}

type ClientSummaryConnection {
  edges: [ClientSummaryEdge]
  pageInfo: PageInfo!
}

type ClientSummaryEdge {
  node: ClientSummary
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ClientSummary {
  clientId: ID!
  description: String
}

type Client {
  clientId: ID!
  clientCreated: String
  description: String
  clientType: String
  clientSecret1Set: Boolean
  clientSecret1Updated: String
  clientSecret2Set: Boolean
  clientSecret2Updated: String
  authorizationsAsSubject: [Authorization]
  authorizationsAsAudience: [Authorization]
  availableScopes: [ClientScope]
  jwtBearer: [JwtBearer]
  managementPermissions: ClientManagementCapabilities
}

type ClientScope {
  scope: ID!
  description: String
}

input ClientScopeInput {
  scope: ID!
  description: String
}

type ClientManagementCapabilities {
  canDeleteClient: Boolean!
  canAddClientSecret: Boolean!
  canDeleteClientSecret: Boolean!
  canAddClientAuthorization: Boolean!
  canDeleteClientAuthorization: Boolean!
  canAddAuthorization: Boolean!
  canDeleteAuthorization: Boolean!
}

type JwtBearer {
  id: ID!
  jwksUrl: String
  iss: String
  sub: String
  aud: String
}

type Authorization {
  id: ID!
  authorizationCreated: String
  subject: Client
  audience: Client
}

type ClientSecret {
  clientSecret: String
}

type Response {
  success: Boolean!
}
